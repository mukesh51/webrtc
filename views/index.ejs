<!DOCTYPE html>
<html>
<head>
	<title>WebRTC Sample</title>
	<link rel="stylesheet" type="text/css" href="style.css">
	<script src="/socket.io/socket.io.js"></script>
</head>
<body>
	<video id="myVideoTag" autoplay></video>
	<video id="theirVideoTag" autoplay></video>
	
	<div>
		<label>Your Name</label><input id="myName" type="text"/>
		<label>Message</label><input id="myMessage" type="text"/>
		<input id="sendMessage" type="submit"/>
		<div id="chatArea">Message Output:</br></div>
		<div id="signalingArea">Signalling Messages:</br></div>
	</div>

	<script>
		
		var myVideoArea = document.querySelector('#myVideoTag');
		var theirVideoArea = document.querySelector('#theirVideoTag');
		var myName = document.querySelector('#myName');
		var myMessage = document.querySelector('#myMessage');
		var sendMessage = document.querySelector('#sendMessage');
		var chatArea = document.querySelector('#chatArea');
		var signalArea = document.querySelector('#signalingArea');
		var ROOM = "chat";
		var SIGNAL_ROOM = "signal_room";
		var configuration = {
				'iceServers': [{
					'url': 'stun:stun.l.google.com:19302'
				},
				{url: "stun:stun.l.google.com:19302"},
	        {url: "stun:stun1.l.google.com:19302"},
	        {url: "stun:stun2.l.google.com:19302"},
	        {url: "stun:stun3.l.google.com:19302"},
	        {url: "stun:stun4.l.google.com:19302"},
	        {url: "stun:23.21.150.121"},
	        {url: "stun:stun01.sipphone.com"},
	        {url: "stun:stun.ekiga.net"},
	        {url: "stun:stun.fwdnet.net"},
	        {url: "stun:stun.ideasip.com"},
	        {url: "stun:stun.iptel.org"},
	        {url: "stun:stun.rixtelecom.se"},
	        {url: "stun:stun.schlund.de"},
	        {url: "stun:stunserver.org"},
	        {url: "stun:stun.softjoys.com"},
	        {url: "stun:stun.voiparound.com"},
	        {url: "stun:stun.voipbuster.com"},
	        {url: "stun:stun.voipstunt.com"},
	        {url: "stun:stun.voxgratia.org"},
	        {url: "stun:stun.xten.com"}]
			};
		var rtcPeerConn;

		io = io.connect();
		io.emit('ready',{"chat_room": ROOM,"signal_room": SIGNAL_ROOM});

		//send first signalling message to anyone listening
		//this normally would be a button click
		io.emit('signal',{"type":"user_here","message":"Are you ready for a call?","room":SIGNAL_ROOM});

		io.on('signaling_message', function(data) {
			displaySignalMessage("Signal received: " + data.type);

			if (!rtcPeerConn)
					startSignaling();

					if (data.type != "user_here") {
					var message = JSON.parse(data.message);
					if (message.sdp) {
						rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
							// if we received an offer, we need to answer
							if (rtcPeerConn.remoteDescription.type == 'offer') {
								rtcPeerConn.createAnswer(sendLocalDesc, logError);
							}
						}, logError);
					}
					else {
						rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
					}
				}
		});

		function startSignaling() {
			displaySignalMessage("starting signaling...");

			rtcPeerConn = new webkitRTCPeerConnection(configuration);

			rtcPeerConn.onicecandidate = function (evt) {
				if (evt.candidate)
					io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM});
				displaySignalMessage("completed that ice candidate...");
			};
			
			// let the 'negotiationneeded' event trigger offer generation
			rtcPeerConn.onnegotiationneeded = function () {
				displaySignalMessage("on negotiation called");
				rtcPeerConn.createOffer(sendLocalDesc, logError);
			}

			rtcPeerConn.onaddstream = function (evt) {
				displaySignalMessage("going to add their stream...");
				theirVideoArea.src = URL.createObjectURL(evt.stream);
			};

			// get a local stream, show it in our video tag and add it to be sent
			navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
			navigator.getUserMedia({
				'audio': true,
				'video': true
			}, function (stream) {
				displaySignalMessage("going to display my stream...");
				myVideoArea.src = URL.createObjectURL(stream);
				rtcPeerConn.addStream(stream);
			}, logError);
		}

		function sendLocalDesc(desc) {
			rtcPeerConn.setLocalDescription(desc, function () {
				displaySignalMessage("sending local description");
				io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
			}, logError);
		}
		
		function logError(error) {
			displaySignalMessage(error.name + ': ' + error.message);
		}

		io.on('announce', function(data) {
			displayMessage(data.message);
		});

		io.on('message', function(data) {
			displayMessage(data.author+": "+data.message);
		});

		function displayMessage(message) {
			chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
		}

		function displaySignalMessage(message) {
			signalArea.innerHTML = signalArea.innerHTML + "<br/>" + message;
		}

		sendMessage.addEventListener('click', function(ev) {
			io.emit('send', {"author": myName.value, "message": myMessage.value, "room": ROOM});
			ev.preventDefault();
		}, false);


		
		
	</script>
</body>
</html>